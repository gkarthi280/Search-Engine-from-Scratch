*Must be run on a specific python version, which is python 3.6.8, so make sure to either load python 3.6.8 module or have python 3.6.8 installed.*

Dependencies we used
This code will not work unless the following libraries are installed.
-BeautifulSoup (follow this link to install, -https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-beautiful-soup)
-Nltk  (follow this link to install, https://www.nltk.org/install.html )

Installing Libraries
https://packaging.python.org/en/latest/tutorials/installing-packages/ 

Website data was provided by the course assignment. 
NOTE: if your data does not match, the indexer might not run. Website data was stored in json files.


On the modules:

-PartA.py

This module takes in a document and converts all the terms in the document into a token, which will be used by the rest of the modules. 
The main function that was called throughout this module was “tokenize”. 
This function would return a dictionary that consists of the keys being the token (each unique word) and the value being the frequency that the token occurred in the document.

-Indexer.py

This module creates all of the index files for the searcher to run off of. 
If you are going to run this code you need to run this file first. 
Follow the instructions on the section called Running indexer.py to run this code without any errors.

-Searcher.py

This module is the main search component. It uses the shell as a user interface and prompts for queries then evaluates them on the indexes created by the indexer. 
This module will not work unless indexes have been created. 
And the path variable has been changed to match the finalizeP variable in the indexer.py. 
If you followed the instructions there you need to copy this path into the path variable in this module.

--First Run:
If you are going to run this program make sure to read the documentation below. Otherwise, it won't work.

*Running indexer.py

Change devpath to the specific directory of DEV.zip on your local computer or any other corpus you are using. 

Create three folders, which will be used to store all the index files generated by indexer.py in a specified place of your choosing. 
Two of these folders store partial indexes and the other holds the final indexes.
Additionally, remember where these locations are in your computer. 

Change indexpath to the specific directory of the folder you previously created representing the intermediate index files. 
This is where partial indexes are stored during the index creation process. This should be a string like this "users/folder/index"

Change finalpath to the directory of the folder you previously created representing the location. 
This path is a final staging location that is also an intermediary. It is used to format indexes for the searcher later. This should be a string like this "users/folder/index1"

Change finalizeP to the directory of the folder you previously created representing the location of all the finalized index files. 
This is the path the searcher will also use. This should be a string like this "users/folder/finalIndex"

NOTE: No knowledge of what these three variables mean is required, as long as you name your three folders differently and set indexpath, finalpath, and finalizeP to each of these respectively.
-Run module indexer.py by pressing F5 in the python IDLE or whatever method of running a program your code editing software supports. 

*Running Searcher.py

Change the path variable to match the finalizeP string in indexer.py

If all the instructions given in running indexer.py and searcher.py were followed, 
this module is run with the same method as previously, by pressing F5 in the python IDLE or whatever method of running a program your code editing software supports. 
Running searcher.py will prompt the user for a search query and return “most relevant” URLs associated with the query. The user can repeatedly enter search queries. 
To terminate the program, enter “-1_exit” as a separate query.




